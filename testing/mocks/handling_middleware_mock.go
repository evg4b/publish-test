package mocks

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

//go:generate minimock -i github.com/evg4b/uncors/internal/processor.HandlingMiddleware -o ./handling_middleware_mock.go -n HandlingMiddlewareMock

import (
	"github.com/evg4b/uncors/internal/processor"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// HandlingMiddlewareMock implements processor.HandlingMiddleware
type HandlingMiddlewareMock struct {
	t minimock.Tester

	funcWrap          func(next processor.HandlerFunc) (h1 processor.HandlerFunc)
	inspectFuncWrap   func(next processor.HandlerFunc)
	afterWrapCounter  uint64
	beforeWrapCounter uint64
	WrapMock          mHandlingMiddlewareMockWrap
}

// NewHandlingMiddlewareMock returns a mock for processor.HandlingMiddleware
func NewHandlingMiddlewareMock(t minimock.Tester) *HandlingMiddlewareMock {
	m := &HandlingMiddlewareMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.WrapMock = mHandlingMiddlewareMockWrap{mock: m}
	m.WrapMock.callArgs = []*HandlingMiddlewareMockWrapParams{}

	return m
}

type mHandlingMiddlewareMockWrap struct {
	mock               *HandlingMiddlewareMock
	defaultExpectation *HandlingMiddlewareMockWrapExpectation
	expectations       []*HandlingMiddlewareMockWrapExpectation

	callArgs []*HandlingMiddlewareMockWrapParams
	mutex    sync.RWMutex
}

// HandlingMiddlewareMockWrapExpectation specifies expectation struct of the HandlingMiddleware.Wrap
type HandlingMiddlewareMockWrapExpectation struct {
	mock    *HandlingMiddlewareMock
	params  *HandlingMiddlewareMockWrapParams
	results *HandlingMiddlewareMockWrapResults
	Counter uint64
}

// HandlingMiddlewareMockWrapParams contains parameters of the HandlingMiddleware.Wrap
type HandlingMiddlewareMockWrapParams struct {
	next processor.HandlerFunc
}

// HandlingMiddlewareMockWrapResults contains results of the HandlingMiddleware.Wrap
type HandlingMiddlewareMockWrapResults struct {
	h1 processor.HandlerFunc
}

// Expect sets up expected params for HandlingMiddleware.Wrap
func (mmWrap *mHandlingMiddlewareMockWrap) Expect(next processor.HandlerFunc) *mHandlingMiddlewareMockWrap {
	if mmWrap.mock.funcWrap != nil {
		mmWrap.mock.t.Fatalf("HandlingMiddlewareMock.Wrap mock is already set by Set")
	}

	if mmWrap.defaultExpectation == nil {
		mmWrap.defaultExpectation = &HandlingMiddlewareMockWrapExpectation{}
	}

	mmWrap.defaultExpectation.params = &HandlingMiddlewareMockWrapParams{next}
	for _, e := range mmWrap.expectations {
		if minimock.Equal(e.params, mmWrap.defaultExpectation.params) {
			mmWrap.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmWrap.defaultExpectation.params)
		}
	}

	return mmWrap
}

// Inspect accepts an inspector function that has same arguments as the HandlingMiddleware.Wrap
func (mmWrap *mHandlingMiddlewareMockWrap) Inspect(f func(next processor.HandlerFunc)) *mHandlingMiddlewareMockWrap {
	if mmWrap.mock.inspectFuncWrap != nil {
		mmWrap.mock.t.Fatalf("Inspect function is already set for HandlingMiddlewareMock.Wrap")
	}

	mmWrap.mock.inspectFuncWrap = f

	return mmWrap
}

// Return sets up results that will be returned by HandlingMiddleware.Wrap
func (mmWrap *mHandlingMiddlewareMockWrap) Return(h1 processor.HandlerFunc) *HandlingMiddlewareMock {
	if mmWrap.mock.funcWrap != nil {
		mmWrap.mock.t.Fatalf("HandlingMiddlewareMock.Wrap mock is already set by Set")
	}

	if mmWrap.defaultExpectation == nil {
		mmWrap.defaultExpectation = &HandlingMiddlewareMockWrapExpectation{mock: mmWrap.mock}
	}
	mmWrap.defaultExpectation.results = &HandlingMiddlewareMockWrapResults{h1}
	return mmWrap.mock
}

//Set uses given function f to mock the HandlingMiddleware.Wrap method
func (mmWrap *mHandlingMiddlewareMockWrap) Set(f func(next processor.HandlerFunc) (h1 processor.HandlerFunc)) *HandlingMiddlewareMock {
	if mmWrap.defaultExpectation != nil {
		mmWrap.mock.t.Fatalf("Default expectation is already set for the HandlingMiddleware.Wrap method")
	}

	if len(mmWrap.expectations) > 0 {
		mmWrap.mock.t.Fatalf("Some expectations are already set for the HandlingMiddleware.Wrap method")
	}

	mmWrap.mock.funcWrap = f
	return mmWrap.mock
}

// When sets expectation for the HandlingMiddleware.Wrap which will trigger the result defined by the following
// Then helper
func (mmWrap *mHandlingMiddlewareMockWrap) When(next processor.HandlerFunc) *HandlingMiddlewareMockWrapExpectation {
	if mmWrap.mock.funcWrap != nil {
		mmWrap.mock.t.Fatalf("HandlingMiddlewareMock.Wrap mock is already set by Set")
	}

	expectation := &HandlingMiddlewareMockWrapExpectation{
		mock:   mmWrap.mock,
		params: &HandlingMiddlewareMockWrapParams{next},
	}
	mmWrap.expectations = append(mmWrap.expectations, expectation)
	return expectation
}

// Then sets up HandlingMiddleware.Wrap return parameters for the expectation previously defined by the When method
func (e *HandlingMiddlewareMockWrapExpectation) Then(h1 processor.HandlerFunc) *HandlingMiddlewareMock {
	e.results = &HandlingMiddlewareMockWrapResults{h1}
	return e.mock
}

// Wrap implements processor.HandlingMiddleware
func (mmWrap *HandlingMiddlewareMock) Wrap(next processor.HandlerFunc) (h1 processor.HandlerFunc) {
	mm_atomic.AddUint64(&mmWrap.beforeWrapCounter, 1)
	defer mm_atomic.AddUint64(&mmWrap.afterWrapCounter, 1)

	if mmWrap.inspectFuncWrap != nil {
		mmWrap.inspectFuncWrap(next)
	}

	mm_params := &HandlingMiddlewareMockWrapParams{next}

	// Record call args
	mmWrap.WrapMock.mutex.Lock()
	mmWrap.WrapMock.callArgs = append(mmWrap.WrapMock.callArgs, mm_params)
	mmWrap.WrapMock.mutex.Unlock()

	for _, e := range mmWrap.WrapMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.h1
		}
	}

	if mmWrap.WrapMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmWrap.WrapMock.defaultExpectation.Counter, 1)
		mm_want := mmWrap.WrapMock.defaultExpectation.params
		mm_got := HandlingMiddlewareMockWrapParams{next}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmWrap.t.Errorf("HandlingMiddlewareMock.Wrap got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmWrap.WrapMock.defaultExpectation.results
		if mm_results == nil {
			mmWrap.t.Fatal("No results are set for the HandlingMiddlewareMock.Wrap")
		}
		return (*mm_results).h1
	}
	if mmWrap.funcWrap != nil {
		return mmWrap.funcWrap(next)
	}
	mmWrap.t.Fatalf("Unexpected call to HandlingMiddlewareMock.Wrap. %v", next)
	return
}

// WrapAfterCounter returns a count of finished HandlingMiddlewareMock.Wrap invocations
func (mmWrap *HandlingMiddlewareMock) WrapAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmWrap.afterWrapCounter)
}

// WrapBeforeCounter returns a count of HandlingMiddlewareMock.Wrap invocations
func (mmWrap *HandlingMiddlewareMock) WrapBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmWrap.beforeWrapCounter)
}

// Calls returns a list of arguments used in each call to HandlingMiddlewareMock.Wrap.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmWrap *mHandlingMiddlewareMockWrap) Calls() []*HandlingMiddlewareMockWrapParams {
	mmWrap.mutex.RLock()

	argCopy := make([]*HandlingMiddlewareMockWrapParams, len(mmWrap.callArgs))
	copy(argCopy, mmWrap.callArgs)

	mmWrap.mutex.RUnlock()

	return argCopy
}

// MinimockWrapDone returns true if the count of the Wrap invocations corresponds
// the number of defined expectations
func (m *HandlingMiddlewareMock) MinimockWrapDone() bool {
	for _, e := range m.WrapMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.WrapMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterWrapCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcWrap != nil && mm_atomic.LoadUint64(&m.afterWrapCounter) < 1 {
		return false
	}
	return true
}

// MinimockWrapInspect logs each unmet expectation
func (m *HandlingMiddlewareMock) MinimockWrapInspect() {
	for _, e := range m.WrapMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to HandlingMiddlewareMock.Wrap with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.WrapMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterWrapCounter) < 1 {
		if m.WrapMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to HandlingMiddlewareMock.Wrap")
		} else {
			m.t.Errorf("Expected call to HandlingMiddlewareMock.Wrap with params: %#v", *m.WrapMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcWrap != nil && mm_atomic.LoadUint64(&m.afterWrapCounter) < 1 {
		m.t.Error("Expected call to HandlingMiddlewareMock.Wrap")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *HandlingMiddlewareMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockWrapInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *HandlingMiddlewareMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *HandlingMiddlewareMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockWrapDone()
}
